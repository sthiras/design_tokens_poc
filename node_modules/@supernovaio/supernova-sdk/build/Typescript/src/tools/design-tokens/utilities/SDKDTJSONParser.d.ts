export declare type DTParsedNode = {
    rootKey: string;
    name: string;
    path: Array<string>;
    type: string;
    value: any;
    description: string | null;
};
export declare type DTParsedTokenSet = {
    name: string;
    id: string;
    contains: Array<DTParsedNode>;
};
export declare type DTParsedTheme = {
    name: string;
    id: string;
    selectedTokenSets: Array<DTParsedThemeSetPriorityPair>;
};
export declare type DTParsedThemeSetPriorityPair = {
    set: DTParsedTokenSet;
    priority: DTParsedThemeSetPriority;
};
export declare enum DTParsedThemeSetPriority {
    source = "source",
    enabled = "enabled",
    disabled = "disabled"
}
/** Design Tokens Plugin Manipulation Tool */
export declare class DTJSONParser {
    themeBuffer: Array<DTParsedTheme>;
    constructor();
    processPluginDataRepresentation(definition: object): Promise<{
        nodes: Array<DTParsedNode>;
        themes: Array<DTParsedTheme>;
        sets: Array<DTParsedTokenSet>;
    }>;
    private processThemes;
    private processSets;
    private parseNode;
}
