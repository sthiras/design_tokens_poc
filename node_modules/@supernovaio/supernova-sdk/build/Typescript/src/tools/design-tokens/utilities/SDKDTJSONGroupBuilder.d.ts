import { Brand, DesignSystemVersion, TokenGroup, TokenType } from '../../..';
import { DTProcessedTokenNode } from './SDKDTJSONConverter';
import { DTPluginToSupernovaMapPack } from './SDKDTMapLoader';
export declare type DTRootGroupMapping = {
    snType: TokenType;
    dtType: string;
    snRootName: string;
    dtRootName: string;
};
/** Utility for building token trees */
export declare class DTJSONGroupBuilder {
    version: DesignSystemVersion;
    mapping: DTPluginToSupernovaMapPack;
    constructor(version: DesignSystemVersion, mapping: DTPluginToSupernovaMapPack);
    /** Create mapping between DT <> SN and assign all tokens into their respective newly created groups */
    constructAllDefinableGroupsTrees(processedNodes: Array<DTProcessedTokenNode>, brand: Brand): Array<TokenGroup>;
    /** Create group tree needed to contain entire token tree for particular mapping combination */
    constructGroupTree(processedNodes: Array<DTProcessedTokenNode>, mapping: DTRootGroupMapping, brand: Brand): Array<TokenGroup>;
    constructGroupChain(version: DesignSystemVersion, brand: Brand, groups: Map<string, TokenGroup>, path: Array<string>): void;
    createGroup(brandId: string, versionId: string, name: string, type: TokenType, isRoot: boolean): TokenGroup;
}
