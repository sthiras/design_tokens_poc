import { TokenGroup } from "../../../model/groups/SDKTokenGroup";
import { Token } from "../../../model/tokens/SDKToken";
import { BorderTokenValue, ColorTokenValue, FontTokenValue, GradientTokenValue, MeasureTokenValue, RadiusTokenValue, ShadowTokenValue, TextTokenValue, TypographyTokenValue } from "../../../model/tokens/SDKTokenValue";
import { TokenJSONBuilderOptionsInternal } from "../SDKToolsJSONBuilder";
import { TokenJSONElementTransformer } from "./SDKToolsJSONElementTransformer";
/** Token transformer that allow generic transform of tokens to different destinations, like Style Dictionary or Figma Tokens representation */
export declare class TokenJSONElementStyleDictionaryTransformer extends TokenJSONElementTransformer {
    /** Represent color token value either as reference or as plain representation */
    representColorTokenValue(value: ColorTokenValue, allTokens: Array<Token>, allGroups: Array<TokenGroup>, options: TokenJSONBuilderOptionsInternal): any;
    /** Represent radius token value either as reference or as plain representation */
    representRadiusTokenValue(value: RadiusTokenValue, allTokens: Array<Token>, allGroups: Array<TokenGroup>, options: TokenJSONBuilderOptionsInternal): any;
    /** Represent measure token value either as reference or as plain representation */
    representMeasureTokenValue(value: MeasureTokenValue, allTokens: Array<Token>, allGroups: Array<TokenGroup>, options: TokenJSONBuilderOptionsInternal): any;
    /** Represent font token value either as reference or as plain representation */
    representFontTokenValue(value: FontTokenValue, allTokens: Array<Token>, allGroups: Array<TokenGroup>, options: TokenJSONBuilderOptionsInternal): any;
    /** Represent text token value either as reference or as plain representation */
    representTextTokenValue(value: TextTokenValue, allTokens: Array<Token>, allGroups: Array<TokenGroup>, options: TokenJSONBuilderOptionsInternal): any;
    /** Represent typography token value either as reference or as plain representation */
    representTypographyTokenValue(value: TypographyTokenValue, allTokens: Array<Token>, allGroups: Array<TokenGroup>, options: TokenJSONBuilderOptionsInternal): any;
    /** Represent border token value either as reference or as plain representation */
    representBorderTokenValue(value: BorderTokenValue, allTokens: Array<Token>, allGroups: Array<TokenGroup>, options: TokenJSONBuilderOptionsInternal): any;
    /** Represent shadow token value either as reference or as plain representation */
    representShadowTokenValue(value: ShadowTokenValue, allTokens: Array<Token>, allGroups: Array<TokenGroup>, options: TokenJSONBuilderOptionsInternal): any;
    /** Represent gradient token value either as reference or as plain representation */
    representGradientTokenValue(value: GradientTokenValue, allTokens: Array<Token>, allGroups: Array<TokenGroup>, options: TokenJSONBuilderOptionsInternal): any;
    /** Retrieve wrapper to certain token (referenced by name) pointing to token value */
    referenceWrapper(reference: string, options: TokenJSONBuilderOptionsInternal): string;
    groupIsAbstract(group: TokenGroup): boolean;
}
