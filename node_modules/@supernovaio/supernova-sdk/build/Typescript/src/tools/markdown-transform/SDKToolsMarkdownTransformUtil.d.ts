import { DocumentationRichText } from '../../model/documentation/SDKDocumentationRichText';
import { MarkdownTransformType } from './SDKToolsMarkdownTransform';
import { DocumentationPageBlockText } from '../../model/documentation/blocks/SDKDocumentationPageBlockText';
import { DesignSystemVersion } from '../../core/SDKDesignSystemVersion';
import { Token } from '../..';
/** Markdown block transformer */
export declare class MarkdownTransformUtil {
    private transformType;
    private version;
    private tokenTransformer;
    constructor(type: MarkdownTransformType, version: DesignSystemVersion);
    /** Converts rich text block to markdown
     *
     * This is very naive implementation and will break in complicated cases, like double control characters of the same type next to each other
     * Must improve later with something more sophisticated, ideally tree builder with branched resolution.
     */
    convertTextBlockToMarkdown(block: DocumentationPageBlockText): string | null;
    /** Converts rich text to markdown
     *
     * This is very naive implementation and will break in complicated cases, like double control characters of the same type next to each other
     * Must improve later with something more sophisticated, ideally tree builder with branched resolution.
     */
    convertRichTextToMarkdown(richText: DocumentationRichText): string;
    /** Convert token to markdown representation */
    convertTokenToMarkdown(token: Token): string;
}
