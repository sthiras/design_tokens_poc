import { DesignSystemVersion } from '../../core/SDKDesignSystemVersion';
import { DocumentationPageBlockAssets } from '../../model/documentation/blocks/SDKDocumentationPageBlockAssets';
import { DocumentationPageBlockCallout } from '../../model/documentation/blocks/SDKDocumentationPageBlockCallout';
import { DocumentationPageBlockCode } from '../../model/documentation/blocks/SDKDocumentationPageBlockCode';
import { DocumentationPageBlockColumn } from '../../model/documentation/blocks/SDKDocumentationPageBlockColumn';
import { DocumentationPageBlockColumnItem } from '../../model/documentation/blocks/SDKDocumentationPageBlockColumnItem';
import { DocumentationPageBlockCustom } from '../../model/documentation/blocks/SDKDocumentationPageBlockCustom';
import { DocumentationPageBlockDivider } from '../../model/documentation/blocks/SDKDocumentationPageBlockDivider';
import { DocumentationPageBlockEmbedFigma } from '../../model/documentation/blocks/SDKDocumentationPageBlockEmbedFigma';
import { DocumentationPageBlockEmbedGeneric } from '../../model/documentation/blocks/SDKDocumentationPageBlockEmbedGeneric';
import { DocumentationPageBlockEmbedLink } from '../../model/documentation/blocks/SDKDocumentationPageBlockEmbedLink';
import { DocumentationPageBlockEmbedStorybook } from '../../model/documentation/blocks/SDKDocumentationPageBlockEmbedStorybook';
import { DocumentationPageBlockEmbedYoutube } from '../../model/documentation/blocks/SDKDocumentationPageBlockEmbedYoutube';
import { DocumentationPageBlockFrames } from '../../model/documentation/blocks/SDKDocumentationPageBlockFrames';
import { DocumentationPageBlockHeading } from '../../model/documentation/blocks/SDKDocumentationPageBlockHeading';
import { DocumentationPageBlockImage } from '../../model/documentation/blocks/SDKDocumentationPageBlockImage';
import { DocumentationPageOrderedList } from '../../model/documentation/blocks/SDKDocumentationPageBlockOrderedList';
import { DocumentationPageBlockQuote } from '../../model/documentation/blocks/SDKDocumentationPageBlockQuote';
import { DocumentationPageBlockRenderCode } from '../../model/documentation/blocks/SDKDocumentationPageBlockRenderCode';
import { DocumentationPageBlockShortcuts } from '../../model/documentation/blocks/SDKDocumentationPageBlockShortcuts';
import { DocumentationPageBlockTab } from '../../model/documentation/blocks/SDKDocumentationPageBlockTab';
import { DocumentationPageBlockTabItem } from '../../model/documentation/blocks/SDKDocumentationPageBlockTabItem';
import { DocumentationPageBlockTable } from '../../model/documentation/blocks/SDKDocumentationPageBlockTable';
import { DocumentationPageBlockTableCell } from '../../model/documentation/blocks/SDKDocumentationPageBlockTableCell';
import { DocumentationPageBlockTableRow } from '../../model/documentation/blocks/SDKDocumentationPageBlockTableRow';
import { DocumentationPageBlockText } from '../../model/documentation/blocks/SDKDocumentationPageBlockText';
import { DocumentationPageBlockToken } from '../../model/documentation/blocks/SDKDocumentationPageBlockToken';
import { DocumentationPageBlockTokenGroup } from '../../model/documentation/blocks/SDKDocumentationPageBlockTokenGroup';
import { DocumentationPageBlockTokenList } from '../../model/documentation/blocks/SDKDocumentationPageBlockTokenList';
import { DocumentationPageUnorderedList } from '../../model/documentation/blocks/SDKDocumentationPageBlockUnorderedList';
import { DocumentationPage } from '../../model/documentation/SDKDocumentationPage';
import { DocumentationPageBlock } from '../../model/documentation/SDKDocumentationPageBlock';
import { MarkdownTransformType } from './SDKToolsMarkdownTransform';
/** Markdown block transformer */
export declare class MarkdownTransformBlock {
    private transformType;
    private utilTransformer;
    private version;
    newlineSeparator: string;
    constructor(type: MarkdownTransformType, version: DesignSystemVersion);
    /** Converts a single block - depending on the type - to a markdown definition of specific type */
    convertBlockToMarkdown(block: DocumentationPageBlock, pageContext: DocumentationPage): Promise<string | null>;
    convertHeadingBlock(block: DocumentationPageBlockHeading): string | null;
    convertCalloutBlock(block: DocumentationPageBlockCallout): string | null;
    convertQuoteBlock(block: DocumentationPageBlockQuote): string | null;
    convertDividerBlock(block: DocumentationPageBlockDivider): string | null;
    convertImageBlock(block: DocumentationPageBlockImage): string | null;
    convertOrderedListBlock(block: DocumentationPageOrderedList): string | null;
    convertUnorderedListBlock(block: DocumentationPageUnorderedList): string | null;
    convertLiveCodeBlock(block: DocumentationPageBlockRenderCode): string | null;
    convertCodeBlock(block: DocumentationPageBlockCode): string | null;
    convertTextBlock(block: DocumentationPageBlockText): string | null;
    convertGenericEmbedBlock(block: DocumentationPageBlockEmbedGeneric): string | null;
    convertStorybookEmbedBlock(block: DocumentationPageBlockEmbedStorybook): string | null;
    convertLinkBlock(block: DocumentationPageBlockEmbedLink): string | null;
    convertYoutubeEmbedBlock(block: DocumentationPageBlockEmbedYoutube): string | null;
    convertFigmaEmbedBlock(block: DocumentationPageBlockEmbedFigma): string | null;
    convertTokenBlock(block: DocumentationPageBlockToken): Promise<string | null>;
    convertTokenListBlock(block: DocumentationPageBlockTokenList): Promise<string | null>;
    convertTokenGroupBlock(block: DocumentationPageBlockTokenGroup): Promise<string | null>;
    private flattenedGroupsFromRoot;
    convertComponentAssetBlock(block: DocumentationPageBlockAssets): Promise<string | null>;
    convertFigmaFramesBlock(block: DocumentationPageBlockFrames): string | null;
    convertShortcutsBlock(block: DocumentationPageBlockShortcuts, pageContext: DocumentationPage): Promise<string | null>;
    private relativePathToPage;
    convertTableBlock(block: DocumentationPageBlockTable, pageContext: DocumentationPage): Promise<string | null>;
    convertTableRowBlock(block: DocumentationPageBlockTableRow): string | null;
    convertTableCellBlock(block: DocumentationPageBlockTableCell, pageContext: DocumentationPage): Promise<string | null>;
    convertTabsBlock(block: DocumentationPageBlockTab, pageContext: DocumentationPage): Promise<string | null>;
    convertTabItemBlock(block: DocumentationPageBlockTabItem, pageContext: DocumentationPage): Promise<string | null>;
    convertColumnBlock(block: DocumentationPageBlockColumn, pageContext: DocumentationPage): Promise<string | null>;
    convertColumnItemBlock(block: DocumentationPageBlockColumnItem, pageContext: DocumentationPage): Promise<string | null>;
    convertCustomBlock(block: DocumentationPageBlockCustom): string | null;
    convertURLBlock(block: DocumentationPageBlockEmbedGeneric, userAction: string, showLink: boolean): string | null;
}
