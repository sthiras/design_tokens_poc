import { ExporterConfigurationProperty } from '../model/exporters/custom_properties/SDKExporterConfigurationProperty';
import { ExporterCustomBlock } from '../model/exporters/custom_blocks/SDKExporterCustomBlock';
import { ExporterCustomBlockVariant } from '../model/exporters/custom_blocks/SDKExporterCustomBlockVariant';
import { DocumentationConfiguration, DocumentationConfigurationModel } from '../model/documentation/SDKDocumentationConfiguration';
import { DocumentationGroup } from '../model/documentation/SDKDocumentationGroup';
import { DocumentationItem } from '../model/documentation/SDKDocumentationItem';
import { DocumentationPage } from '../model/documentation/SDKDocumentationPage';
import { DesignSystemVersion } from './SDKDesignSystemVersion';
import { DesignSystem } from './SDKDesignSystem';
import { WorkspaceNPMRegistry } from '../model/support/SDKWorkspaceNPMRegistry';
import { ElementProperty } from '..';
import { ElementDataView } from '../model/elements/SDKElementDataView';
export interface DocumentationModel {
    settings: DocumentationConfigurationModel;
}
/** Main documentation accessor object. All data associated with documentation can be access through here, such as pages, groups, any block, and also any configuration your editors did. */
export declare class Documentation {
    /** Associated version */
    private version;
    /** Associated design system */
    private designSystem;
    /** Documentation settings */
    settings: DocumentationConfiguration;
    constructor(version: DesignSystemVersion, designSystem: DesignSystem, model: DocumentationModel, registry: WorkspaceNPMRegistry | null);
    /** Main group to which all groups and pages belong. The root group never shows up inside the editor but is always present in data model */
    rootGroup(): Promise<DocumentationGroup>;
    /** All items, including pages, groups and group of tab type fetched together */
    items(): Promise<Array<DocumentationItem>>;
    /** All groups to which other groups and pages can belong. Each group also contains entire children chain pre-fetched and resolved for convenience */
    groups(): Promise<Array<DocumentationGroup>>;
    /** All pages created within documentation presented as flat structure. Each page contains all data neccessary to render it pre-fetched and resolved for convenience */
    pages(): Promise<Array<DocumentationPage>>;
    /** All custom blocks that were registered with the active exporter configuration */
    customBlocks(): Promise<Array<ExporterCustomBlock>>;
    /** All custom configuration properties that are defined within the active exporter package */
    customConfiguration(): Promise<Array<ExporterConfigurationProperty>>;
    /** All custom block variants that are defined within the active exporter package */
    customBlockVariants(): Promise<Array<ExporterCustomBlockVariant>>;
    /** Retrieves property definitions for components */
    pageProperties(): Promise<Array<ElementProperty>>;
    /** Retrieves property views for components */
    pageDataViews(): Promise<Array<ElementDataView>>;
    /** Publish documentation. This queues a build on Supernova's server that will be processed by the asynchronous CI/CD pipeline. You can request status of the build with associated `isBeingPublished` method. */
    publish(): Promise<{
        status: 'Queued' | 'InProgress' | 'Failure';
        jobId: string | null;
        exporterId: string | null;
    }>;
    /** Publish documentation. This queues a build on Supernova's server that will be processed by the asynchronous CI/CD pipeline. You can request status of the build with associated `isBeingPublished` method. */
    isPublishing(): Promise<{
        status: 'InProgress' | 'Idle';
        jobId: string | null;
        exporterId: string | null;
    }>;
}
