import { Supernova } from '../core/SDKSupernova';
import { AssetFormat, AssetScale, RenderedAsset } from '../exports';
import { Asset } from '../model/assets/SDKAsset';
import { Component } from '../model/components/SDKComponent';
import { DesignComponent } from '../model/components/SDKDesignComponent';
import { ElementDataView } from '../model/elements/SDKElementDataView';
import { ElementProperty } from '../model/elements/SDKElementProperty';
import { TokenType } from '../model/enums/SDKTokenType';
import { AssetGroup } from '../model/groups/SDKAssetGroup';
import { DesignComponentGroup } from '../model/groups/SDKDesignComponentGroup';
import { TokenGroup } from '../model/groups/SDKTokenGroup';
import { TokenTheme } from '../model/themes/SDKTokenTheme';
import { Token } from '../model/tokens/SDKToken';
import { DataCore } from './data/SDKDataCore';
import { Brand } from './SDKBrand';
import { DesignSystem } from './SDKDesignSystem';
import { VersionWriter } from './SDKDesignSystemVersionWriter';
import { Documentation } from './SDKDocumentation';
export interface DesignSystemVersionRemoteModel {
    id: string;
    parentId: string;
    version: string;
    designSystemId: string;
    isReadonly: boolean;
    meta: {
        name: string;
        description: string;
    };
    createdAt: string;
    changeLog: string;
}
export declare class DesignSystemVersion {
    /** Unique identifier of design system version */
    id: string;
    /** Design system in which this version was created */
    designSystem: DesignSystem;
    /** Design system version name */
    name: string;
    /** Design system version description */
    description: string;
    /** Semantic name of version. Will be null if the version is in draft mode */
    version: string | null;
    /** Change log for the version. Will be null if the version is in draft mode */
    changeLog: string | null;
    /** If version is in read-only mode, it can't be modified - only documentation that can be improved */
    isReadOnly: boolean;
    /** Internal: Engine */
    engine: Supernova;
    /** Internal: Data core */
    dataCore: DataCore;
    constructor(engine: Supernova, designSystem: DesignSystem, model: DesignSystemVersionRemoteModel);
    /** Retrieve write object for this version */
    writer(): VersionWriter;
    /**Â Fetches all brands belonging to this design system version. Brand objects can be used to access filtered data belonging to a single brand */
    brands(): Promise<Array<Brand>>;
    /** Fetches all tokens in this design system version. This method retrieves all groups defined across all brands */
    tokens(): Promise<Array<Token>>;
    /** Fetches all themes in this design system version. This method retrieves all groups defined across all brands */
    themes(): Promise<Array<TokenTheme>>;
    /** Fetches all tokens and retrieves resolved array of tokens with applied themes */
    tokensByApplyingThemes(tokenIds: Array<string>, themeIds: Array<string>): Promise<Array<Token>>;
    /** Fetches all token groups in this design system version. This method retrieves all groups defined across all brands */
    tokenGroups(): Promise<Array<TokenGroup>>;
    /** Fetches root of the token group trees. This method returns all roots, one per each brand you have defined, ordered under separate TokenType, one array per category */
    tokenGroupTrees(): Promise<Map<TokenType, Array<TokenGroup>>>;
    /** Fetches all assets in this design system version for all defined brands  */
    components(): Promise<Array<Component>>;
    /** Fetches all assets in this design system version for all defined brands  */
    designComponents(): Promise<Array<DesignComponent>>;
    /** Fetches all designComponent group in this design system version for all defined brands  */
    designComponentGroups(): Promise<Array<DesignComponentGroup>>;
    /** Fetches roots of the designComponent group trees. This group will contain any other top-level groups that user created. This method returns all roots, one per each brand you have defined */
    designComponentGroupTree(): Promise<Array<DesignComponentGroup>>;
    /** Fetches all assets in this design system version for all defined brands */
    assets(): Promise<Array<Asset>>;
    /** Fetches all asset groups and retrieve them as flat array. You can still access all children of groups with children accessor of group object. This method retrieves all groups across all brands */
    assetGroups(): Promise<Array<AssetGroup>>;
    /** Fetches root of the asset group trees. This group will contain any other top-level groups that user created. This method returns all roots, one per each brand you have defined */
    assetGroupTrees(): Promise<Array<AssetGroup>>;
    /** Fetches root documentation object containing the entire documentation structure. This will never be null as there is always documentation object attached to a specific design system version */
    documentation(): Promise<Documentation>;
    /** Renders all assets in this version and retrieves URLs from which assets can be downloaded as key-value. You can only render one combination of size/format with one request - use more requests if you need to render more.
     *
     * Assets that are rendered as "png" will use "scale" attribute, however, when the format is "svg" or "pdf", scale attribute is ignored and will always render the original size.
     *
     * Note that assets are not persistent and URLs will expire quickly - you must download them and store them locally / remotely and can never use this URL publicly as it won't work after a short time */
    renderedAssets(format: AssetFormat, scale: AssetScale): Promise<Array<RenderedAsset>>;
    /** Renders specific assets in this version and retrieves URLs from which assets can be downloaded as key-value. You can only render one combination of size/format with one request - use more requests if you need to render more.
     *
     * Assets that are rendered as "png" will use "scale" attribute, however, when the format is "svg" or "pdf", scale attribute is ignored and will always render the original size.
     *
     * Note that assets are not persistent and URLs will expire quickly - you must download them and store them locally / remotely and can never use this URL publicly as it won't work after a short time */
    specificRenderedAssets(assets: Array<Asset>, format: AssetFormat, scale: AssetScale): Promise<Array<RenderedAsset>>;
    /** Retrieves property definitions for tokens */
    tokenProperties(): Promise<Array<ElementProperty>>;
    /** Retrieves property views for tokens */
    tokenDataViews(): Promise<Array<ElementDataView>>;
    /** Retrieves property definitions for components */
    componentProperties(): Promise<Array<ElementProperty>>;
    /** Retrieves property views for components */
    componentDataViews(): Promise<Array<ElementDataView>>;
    getTokenStudioData(): Promise<object>;
}
