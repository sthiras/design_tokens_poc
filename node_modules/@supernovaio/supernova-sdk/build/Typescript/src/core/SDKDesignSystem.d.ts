import { Supernova } from "../core/SDKSupernova";
import { Source, SourceRemoteModel } from "../model/support/SDKSource";
import { DesignSystemVersion } from "./SDKDesignSystemVersion";
export interface DesignSystemRemoteModel {
    id: string;
    meta: {
        name: string;
        description: string;
    };
    workspaceId: string;
    basePrefixes: string[];
    sources: Array<SourceRemoteModel>;
    isPublic: boolean;
    isMultibrand: boolean;
    docSlug: string;
    docUserSlug?: string;
    docExporterId: string;
    designSystemSwitcher: {
        isEnabled: boolean;
        designSystemIds: Array<string>;
    };
}
export declare class DesignSystem {
    /** Unique identifier of design system */
    id: string;
    /** Unique identifier of the workspace in which this design system was created */
    workspaceId: string;
    /** Design system name */
    name: string;
    /** Design system description */
    description: string;
    /** If enabled, parts of the design system can be accessed by public (for example, documentation site) */
    isPublic: boolean;
    /** If set, signals that multibrand functionality is enabled for this design system */
    isMultiBrand: boolean;
    /** Unique identifier of exporter package used for the documentation */
    documentationExporterId: string;
    /** Documentation URL slug */
    documentationSlug: string;
    /** Documentation URL slug - user override */
    documentationUserSlug: string | null;
    /** Internal: Engine */
    engine: Supernova;
    /** Binding multiple design systems together */
    designSystemSwitcher: {
        isEnabled: boolean;
        designSystemIds: Array<string>;
    };
    constructor(engine: Supernova, model: DesignSystemRemoteModel);
    /** Fetches all versions that were created in the design system. Note that there is always at least one version - the "draft" - if there was no version created manually. */
    versions(): Promise<Array<DesignSystemVersion>>;
    /** Fetches active design system version - the one to which all changes are being written currently. There is always one active version at any moment. */
    activeVersion(): Promise<DesignSystemVersion>;
    /** Get source by source id */
    sourceById(sourceId: string): Promise<Source | undefined>;
    /** Fetches all sources that were created in the design system. Used to feed the design system with the data (design & code). */
    sources(): Promise<Array<Source>>;
    /** Get Figma file from source id */
    figmaFileIdForSourceId(sourceId: string): Promise<string | undefined>;
    /** Get Figma file name from source id */
    figmaFileNameForSourceId(sourceId: string): Promise<string | undefined>;
}
