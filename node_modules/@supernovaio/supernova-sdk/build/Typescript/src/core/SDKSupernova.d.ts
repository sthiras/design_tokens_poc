import { DataBridge, DataBridgeRequestHook, DebugRequestObserver, DebugResponseObserver } from "./data/SDKDataBridge";
import { DataCore } from "./data/SDKDataCore";
import { DesignSystem } from "./SDKDesignSystem";
import { DesignSystemVersion } from "./SDKDesignSystemVersion";
import { Workspace } from "./SDKWorkspace";
import { Exporter } from "../model/exporters/SDKExporter";
import { Source } from "../model/support/SDKSource";
import { User } from "../model/users/SDKUser";
/** Main Supernova.io SDK object. Use this to connect to your data instance and retrieve workspace / design system / version from which you can access all neccessary data. */
export declare class Supernova {
    private useResolutionCache;
    private apiKey;
    private apiUrl;
    private apiVersion;
    private requestHook;
    private debugRequestObserver;
    private debugResponseObserver;
    dataBridge: DataBridge;
    constructor(apiKey: string, url?: string | null, requestHook?: DataBridgeRequestHook | null, requestObserver?: DebugRequestObserver | null, responseObserver?: DebugResponseObserver | null);
    /** Fetches current user profile based on the API key provided to Supernova instance. */
    me(): Promise<User>;
    /** Fetches all workspaces available under provided API key. Each workspace contains specific design systems, which contain versions, which contain all the design system data. */
    workspaces(): Promise<Array<Workspace>>;
    /** Fetches one specific workspace by provided id. Throws when workspace is not found or user doesn't have access to it.  */
    workspace(workspaceId: string): Promise<Workspace | null>;
    /** Fetches design systems which belong to a provided workspace. */
    designSystems(workspaceId: string): Promise<Array<DesignSystem>>;
    /** Fetches design system by provided id. Throws when design system is not found or user doesn't have access to it. */
    designSystem(designSystemId: string): Promise<DesignSystem | null>;
    /** Fetches active design system version - the one to which all changes are being written currently. There is always one active version available for any provided design system. */
    activeDesignSystemVersion(designSystemId: string): Promise<DesignSystemVersion | null>;
    /** Fetches all design system versions of provided design system */
    designSystemVersions(designSystemId: string): Promise<Array<DesignSystemVersion>>;
    /** Fetches design system version by id */
    designSystemVersion(designSystemId: string, versionId: string): Promise<DesignSystemVersion | null>;
    /** Fetches design system sources */
    designSystemSources(designSystemId: string): Promise<Array<Source>>;
    /** Fetches exporters belonging to workspace by id */
    exporters(workspaceId: string): Promise<Array<Exporter>>;
    /** Enables or disables resolution cache. Because of potential amount of data processed extra when this cache is disabled, only do it when you have a good reason (like if you are building a long-running, client-side app). Cache is enabled by default. */
    setResolutionCacheEnabled(isEnabled: boolean): void;
    /** Use this to rebuild data core if the settings change. */
    rebuildBridge(): void;
    /** Use this to make version-instance specific data core. Each version must have its own data core, as it caches the data and they can't intermix. Supernova instance has its own data core. */
    newDataCore(): DataCore;
}
