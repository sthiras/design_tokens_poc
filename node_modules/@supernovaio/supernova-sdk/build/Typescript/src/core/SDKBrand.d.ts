import { Asset } from '../model/assets/SDKAsset';
import { RenderedAsset } from '../model/assets/SDKRenderedAsset';
import { AssetFormat } from '../model/enums/SDKAssetFormat';
import { AssetScale } from '../model/enums/SDKAssetScale';
import { DesignComponent } from '../model/components/SDKDesignComponent';
import { TokenType } from '../model/enums/SDKTokenType';
import { AssetGroup } from '../model/groups/SDKAssetGroup';
import { DesignComponentGroup } from '../model/groups/SDKDesignComponentGroup';
import { TokenGroup } from '../model/groups/SDKTokenGroup';
import { Token } from '../model/tokens/SDKToken';
import { DataCore } from './data/SDKDataCore';
import { DesignSystemVersion } from './SDKDesignSystemVersion';
import { Component } from '../model/components/SDKComponent';
import { BrandWriter } from './SDKBrandWriter';
import { Supernova } from './SDKSupernova';
import { TokenTheme } from '../model/themes/SDKTokenTheme';
export interface BrandRemoteModel {
    id: string;
    designSystemVersionId: string;
    persistentId: string;
    meta: {
        name: string;
        description: string;
    };
}
export declare class Brand {
    /** Unique identifier of the brand in this specific version */
    id: string;
    /** Unique identifier of the brand */
    persistentId: string;
    /** Design System Version in which this brand exists */
    designSystemVersion: DesignSystemVersion;
    /** Brand name */
    name: string;
    /** Brand description */
    description: string;
    /** Internal: Engine */
    engine: Supernova;
    /** Internal: Data core */
    dataCore: DataCore;
    constructor(engine: Supernova, model: BrandRemoteModel, version: DesignSystemVersion);
    /** Retrieve write object for this brand */
    writer(): BrandWriter;
    /** Fetches all tokens available in this design system version belonging to this specific brand */
    tokens(forceRefreshCache?: boolean): Promise<Array<Token>>;
    /** Fetches all tokens and retrieves resolved array of tokens with applied themes */
    tokensByApplyingThemes(themeIds: Array<string>): Promise<Array<Token>>;
    /** Fetches all brands available in this design system version belonging to this specific brand */
    themes(): Promise<Array<TokenTheme>>;
    /** Fetches all token groups available in this design system version belonging to this specific brand */
    tokenGroups(): Promise<Array<TokenGroup>>;
    /** Fetches root of the token group trees. This method returns roots specific to this brand, one group per category */
    tokenGroupTrees(): Promise<Map<TokenType, TokenGroup>>;
    /** Fetches all designComponents available in this design system version belonging to this specific brand */
    components(): Promise<Array<Component>>;
    /** Fetches all designComponents (Figma for now) available in this design system version belonging to this specific brand */
    designComponents(): Promise<Array<DesignComponent>>;
    /** Fetches all designComponent groups as flattened array available in this design system version belonging to this specific brand */
    designComponentGroups(): Promise<Array<DesignComponentGroup>>;
    /** Fetches root of the designComponent group tree. This group will contain any other top-level groups that user created and will belong to this specific brand */
    designComponentGroupTree(): Promise<DesignComponentGroup>;
    /** Fetches all assets available in this design system version belonging to this specific brand */
    assets(): Promise<Array<Asset>>;
    /** Fetches all asset groups as flattened array available in this design system version belonging to this specific brand */
    assetGroups(): Promise<Array<AssetGroup>>;
    /** Fetches root of the asset group tree. This group will contain any other top-level groups that user created and will be specific to this brand */
    assetGroupTree(): Promise<AssetGroup>;
    /** Renders all assets in this brand and retrieves URLs from which assets can be downloaded as key-value. You can only render one combination of size/format with one request - use more requests if you need to render more.
     *
     * Assets that are rendered as "png" will use "scale" attribute, however, when the format is "svg" or "pdf", scale attribute is ignored and will always render the original size.
     *
     * Note that assets are not persistent and URLs will expire quickly - you must download them and store them locally / remotely and can never use this URL publicly as it won't work after a short time */
    renderedAssets(format: AssetFormat, scale: AssetScale): Promise<Array<RenderedAsset>>;
    /** Renders specific assets in this brand and retrieves URLs from which assets can be downloaded as key-value. You can only render one combination of size/format with one request - use more requests if you need to render more.
     *
     * Assets that are rendered as "png" will use "scale" attribute, however, when the format is "svg" or "pdf", scale attribute is ignored and will always render the original size.
     *
     * Note that assets are not persistent and URLs will expire quickly - you must download them and store them locally / remotely and can never use this URL publicly as it won't work after a short time */
    specificRenderedAssets(assets: Array<Asset>, format: AssetFormat, scale: AssetScale): Promise<Array<RenderedAsset>>;
}
