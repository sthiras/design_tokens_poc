import { Asset } from '../../model/assets/SDKAsset';
import { RenderedAsset } from '../../model/assets/SDKRenderedAsset';
import { AssetFormat } from '../../model/enums/SDKAssetFormat';
import { AssetScale } from '../../model/enums/SDKAssetScale';
import { DesignComponent } from '../../model/components/SDKDesignComponent';
import { ExporterCustomBlock } from '../../model/exporters/custom_blocks/SDKExporterCustomBlock';
import { DocumentationConfiguration } from '../../model/documentation/SDKDocumentationConfiguration';
import { DocumentationItem } from '../../model/documentation/SDKDocumentationItem';
import { AssetGroup } from '../../model/groups/SDKAssetGroup';
import { DesignComponentGroup } from '../../model/groups/SDKDesignComponentGroup';
import { TokenGroup, TokenGroupRemoteModel } from '../../model/groups/SDKTokenGroup';
import { TokenRemoteModel } from '../../model/tokens/remote/SDKRemoteTokenModel';
import { Token } from '../../model/tokens/SDKToken';
import { DesignSystemVersion } from '../SDKDesignSystemVersion';
import { Documentation } from '../SDKDocumentation';
import { DataBridge } from './SDKDataBridge';
import { ExporterConfigurationProperty } from '../../model/exporters/custom_properties/SDKExporterConfigurationProperty';
import { DesignSystem } from '../SDKDesignSystem';
import { ExporterCustomBlockVariant } from '../../model/exporters/custom_blocks/SDKExporterCustomBlockVariant';
import { Component } from '../../model/components/SDKComponent';
import { TokenTheme, TokenThemeRemoteModel } from '../../model/themes/SDKTokenTheme';
import { ElementDataView } from '../../model/elements/SDKElementDataView';
import { ElementProperty } from '../..';
export declare class DataCore {
    private tokensSynced;
    private tokenGroupsSynced;
    private themesSynced;
    private componentsSynced;
    private designComponentAssetSynced;
    private designComponentAssetGroupsSynced;
    private documentationItemsSynced;
    private documentationSynced;
    private exporterCustomBlocksSynced;
    private elementPropertiesSynced;
    private elementDataViewsSynced;
    private tokens;
    private tokenGroups;
    private themes;
    private components;
    private designComponents;
    private designComponentGroups;
    private assets;
    private assetGroups;
    private documentation;
    private documentationItems;
    private exporterCustomBlocks;
    private elementProperties;
    private elementDataViews;
    private bridge;
    constructor(bridge: DataBridge);
    /** Get workspace handle from server */
    private currentWorkspaceHandle;
    /** Get deisgn system documentation url from server */
    private currentDeployedDocumentationUrl;
    currentDesignSystemThemes(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<Array<TokenTheme>>;
    currentDesignSystemTokens(designSystemId: string, designSystemVersion: DesignSystemVersion, forceRefreshCache?: boolean): Promise<Array<Token>>;
    currentDesignSystemTokenGroups(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<Array<TokenGroup>>;
    currentDesignSystemElementProperties(designSystemId: string, designSystemVersion: DesignSystemVersion, forceRefreshCache?: boolean): Promise<Array<ElementProperty>>;
    currentDesignSystemElementDataViews(designSystemId: string, designSystemVersion: DesignSystemVersion, forceRefreshCache?: boolean): Promise<Array<ElementDataView>>;
    currentDesignSystemAssets(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<Array<Asset>>;
    currentDesignSystemAssetGroups(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<Array<AssetGroup>>;
    renderAssetsForConfiguration(designSystemId: string, designSystemVersion: DesignSystemVersion, assets: Array<Asset>, groups: Array<AssetGroup>, format: AssetFormat, scale: AssetScale): Promise<Array<RenderedAsset>>;
    assetPath(asset: Asset, parent: AssetGroup): string;
    currentDesignSystemComponents(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<Array<Component>>;
    currentDesignSystemDesignComponents(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<Array<DesignComponent>>;
    currentDesignSystemDesignComponentGroups(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<Array<DesignComponentGroup>>;
    currentDesignSystemDocumentationItems(designSystem: DesignSystem, designSystemVersion: DesignSystemVersion): Promise<Array<DocumentationItem>>;
    currentDesignSystemDocumentation(designSystem: DesignSystem, designSystemVersion: DesignSystemVersion): Promise<Documentation>;
    currentExporterCustomBlocks(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<Array<ExporterCustomBlock>>;
    currentExporterConfigurationProperties(workspaceId: string, designSystemId: string, exporterId: string, designSystemVersion: DesignSystemVersion): Promise<Array<ExporterConfigurationProperty>>;
    currentExporterBlockVariants(workspaceId: string, designSystemId: string, exporterId: string, designSystemVersion: DesignSystemVersion): Promise<Array<ExporterCustomBlockVariant>>;
    /** Update current element views of the documentation */
    updateElementData(designSystem: string, designSystemVersion: DesignSystemVersion): Promise<void>;
    private getElementData;
    /** Prepare design configuration, merging it with pulsar data */
    updateDocumentationData(designSystem: DesignSystem, designSystemVersion: DesignSystemVersion): Promise<void>;
    private getDocumentation;
    private getNPMRegistry;
    /** Download all custom blocks provided by the currently active exporter */
    updateExporterCustomBlocksData(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<void>;
    private getExporterCustomBlocks;
    private getExporterCustomBlockData;
    private resolveExporterCustomBlockData;
    private getExporterConfigurationPropertyUserValues;
    private getExporterConfigurationPropertiesUserValuesData;
    private getExporter;
    private getExporterData;
    private resolveExporterData;
    /** Prepare design system data for use for the entire design system, downloading and resolving all tokens */
    updateTokenData(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<void>;
    private getTokens;
    private getRawTokenData;
    private resolveTokenData;
    /** Prepare design system data for use for the entire design system, downloading and resolving all groups */
    updateTokenGroupData(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<void>;
    private getTokenGroups;
    private getRawTokenGroupData;
    private resolveTokenGroupData;
    /** Prepare design system data for use for the entire design system, downloading and resolving all tokens */
    updateThemesData(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<void>;
    private getThemes;
    private getRawThemeData;
    private resolveThemeData;
    /** Prepare design system data for use for the entire design system, downloading and resolving all components - and indirectly, assets as well */
    updateComponentData(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<void>;
    private getComponents;
    private getRawComponentData;
    private getRawElementPropertyData;
    private getRawElementPropertyValuesData;
    private resolveComponentData;
    /** Prepare design system data for use for the entire design system, downloading and resolving all design components - and indirectly, assets as well */
    updateDesignComponentAndAssetData(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<void>;
    private getDesignComponentsAndAssets;
    private getRawDesignComponentAndAssetData;
    private resolveDesignComponentAndAssetData;
    /** Prepare design system data for use for the entire design system, downloading and resolving all groups */
    updateDesignComponentAndAssetGroupData(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<void>;
    private getDesignComponentAndAssetGroups;
    private getRawDesignComponentAndAssetGroupData;
    private resolveDesignComponentGroupData;
    private resolveAssetGroupData;
    updateDocumentationItemData(designSystemId: string, designSystemVersion: DesignSystemVersion, blocks: Array<ExporterCustomBlock>, configuration: DocumentationConfiguration): Promise<void>;
    private getDocumentationItems;
    private getRawDocumentationItemData;
    private resolveDocumentationItemData;
    getTokenStudioData(designSystemId: string, designSystemVersion: DesignSystemVersion): Promise<object>;
    writeTokenData(designSystemId: string, designSystemVersion: DesignSystemVersion, tokens: Array<TokenRemoteModel>, groups: Array<TokenGroupRemoteModel>, deleteTokens: Array<Token>): Promise<{
        tokens: Array<TokenRemoteModel>;
        tokenGroups: Array<TokenGroup>;
    }>;
    writeTokenThemeData(designSystemId: string, designSystemVersion: DesignSystemVersion, theme: TokenThemeRemoteModel): Promise<TokenThemeRemoteModel>;
    writeTokenStudioJSONData(designSystemId: string, designSystemVersion: DesignSystemVersion, data: object): Promise<boolean>;
    documetationJobs(version: DesignSystemVersion, limit?: number): Promise<Array<{
        status: 'InProgress' | 'Success' | 'Failed';
        id: string | null;
        exporterId: string | null;
    }>>;
    publishDocumentation(version: DesignSystemVersion): Promise<{
        status: 'Queued' | 'InProgress' | 'Failure';
        jobId: string | null;
        exporterId: string | null;
    }>;
}
