import { TokenOrigin } from '../..';
import { ElementDataViewRemoteModel } from '../../model/elements/SDKElementDataView';
import { ElementProperty, ElementPropertyRemoteModel } from '../../model/elements/SDKElementProperty';
import { ElementPropertyValue, ElementPropertyValueRemoteModel } from '../../model/elements/values/SDKElementPropertyValue';
import { TokenType } from '../../model/enums/SDKTokenType';
import { TokenGroup } from '../../model/groups/SDKTokenGroup';
import { TokenTheme, TokenThemeRemoteModel } from '../../model/themes/SDKTokenTheme';
import { TokenThemeOverrideRemoteModel } from '../../model/themes/SDKTokenThemeOverride';
import { ColorTokenRemoteData, MeasureTokenRemoteData, FontTokenRemoteData } from '../../model/tokens/remote/SDKRemoteTokenData';
import { TokenRemoteModel, ColorTokenRemoteModel, BorderTokenRemoteModel, FontTokenRemoteModel, GradientTokenRemoteModel, MeasureTokenRemoteModel, RadiusTokenRemoteModel, ShadowTokenRemoteModel, TextTokenRemoteModel, TypographyTokenRemoteModel, BlurTokenRemoteModel, GenericTokenRemoteModel } from '../../model/tokens/remote/SDKRemoteTokenModel';
import { BlurTokenRemoteValue, BorderTokenRemoteValue, ColorTokenRemoteValue, FontTokenRemoteValue, GradientStopRemoteValue, GradientTokenRemoteValue, MeasureTokenRemoteValue, RadiusTokenRemoteValue, ShadowTokenRemoteValue, TextTokenRemoteValue, TypographyTokenRemoteValue } from '../../model/tokens/remote/SDKRemoteTokenValue';
import { BlurToken } from '../../model/tokens/SDKBlurToken';
import { BorderToken } from '../../model/tokens/SDKBorderToken';
import { ColorToken } from '../../model/tokens/SDKColorToken';
import { FontToken } from '../../model/tokens/SDKFontToken';
import { GradientToken } from '../../model/tokens/SDKGradientToken';
import { MeasureToken } from '../../model/tokens/SDKMeasureToken';
import { RadiusToken } from '../../model/tokens/SDKRadiusToken';
import { ShadowToken } from '../../model/tokens/SDKShadowToken';
import { TextToken } from '../../model/tokens/SDKTextToken';
import { Token } from '../../model/tokens/SDKToken';
import { BlurTokenValue, BorderTokenValue, ColorTokenValue, FontTokenValue, GenericTokenValue, GradientStopValue, GradientTokenValue, MeasureTokenValue, RadiusTokenValue, ShadowTokenValue, TextTokenValue, TypographyTokenValue } from '../../model/tokens/SDKTokenValue';
import { TypographyToken } from '../../model/tokens/SDKTypographyToken';
import { DesignSystemVersion } from '../SDKDesignSystemVersion';
export declare class TokenResolver {
    hashedTokens: Map<string, TokenRemoteModel>;
    resolvedTokens: Map<string, Token>;
    hashedOverrides: Map<string, TokenThemeOverrideRemoteModel>;
    hashedReconstructedOverrides: Map<string, Token>;
    resolvedOverrides: Map<string, Token>;
    version: DesignSystemVersion;
    constructor(version: DesignSystemVersion);
    resolveTokenData(data: Array<TokenRemoteModel>, tokenGroups: Array<TokenGroup>, properties: Array<ElementPropertyRemoteModel>, views: Array<ElementDataViewRemoteModel>, values: Array<ElementPropertyValueRemoteModel>): Array<Token>;
    tokenTypeIsPure(tokenType: TokenType): boolean;
    resolveThemeData(data: TokenThemeRemoteModel, tokens: Array<Token>, tokenGroups: Array<TokenGroup>): TokenTheme;
    makeThemedValuelessTokenReplica(token: Token, themeId: string, origin: TokenOrigin | null): Token;
    fixMultilayerShadowTokens(tokens: Array<ShadowToken>): void;
    fixMultilayerGradientTokens(tokens: Array<GradientToken>): void;
    fixMultilayerBlurTokens(tokens: Array<BlurToken>): void;
    findAssociatedTokens<T extends Token>(token: T, tokens: Array<T>): Array<T>;
    actualOriginTokenId(id: string | null): string;
    constructReferencedToken(rawData: TokenRemoteModel, properties: Array<ElementProperty>, values: Array<ElementPropertyValue>): Token;
    constructReferencedThemedToken(rawData: TokenThemeOverrideRemoteModel, themeId: string): Token;
    constructResolvedThemedToken(rawData: TokenThemeOverrideRemoteModel, referencedToken: Token, themeId: string): Token;
    constructResolvedToken(rawData: TokenRemoteModel, referencedToken: Token, properties: Array<ElementProperty>, values: Array<ElementPropertyValue>): Token;
    constructValueToken(rawData: TokenRemoteModel, properties: Array<ElementProperty>, values: Array<ElementPropertyValue>): Token;
    constructThemedValueToken(override: TokenThemeOverrideRemoteModel, themeId: string): Token;
    constructColorToken(rawData: ColorTokenRemoteModel, properties: Array<ElementProperty>, values: Array<ElementPropertyValue>): ColorToken;
    constructColorValue(rawValue: ColorTokenRemoteValue): ColorTokenValue;
    constructTextToken(rawData: TextTokenRemoteModel, properties: Array<ElementProperty>, values: Array<ElementPropertyValue>): TextToken;
    constructGenericToken(rawData: GenericTokenRemoteModel, properties: Array<ElementProperty>, values: Array<ElementPropertyValue>): TextToken;
    constructTextLikeTokenValue(rawData: TextTokenRemoteValue): TextTokenValue | GenericTokenValue;
    constructMeasureToken(rawData: MeasureTokenRemoteModel, properties: Array<ElementProperty>, values: Array<ElementPropertyValue>): MeasureToken;
    constructMeasureValue(rawData: MeasureTokenRemoteValue): MeasureTokenValue;
    constructFontToken(rawData: FontTokenRemoteModel, properties: Array<ElementProperty>, values: Array<ElementPropertyValue>): FontToken;
    constructFontValue(rawData: FontTokenRemoteValue): FontTokenValue;
    constructGradientToken(rawData: GradientTokenRemoteModel, properties: Array<ElementProperty>, values: Array<ElementPropertyValue>): GradientToken;
    constructGradientTokenValue(rawData: GradientTokenRemoteValue): GradientTokenValue;
    constructGradientStops(rawData: Array<GradientStopRemoteValue>): Array<GradientStopValue>;
    constructRadiusToken(rawData: RadiusTokenRemoteModel, properties: Array<ElementProperty>, values: Array<ElementPropertyValue>): RadiusToken;
    constructRadiusTokenValue(rawData: RadiusTokenRemoteValue): RadiusTokenValue;
    constructShadowToken(rawData: ShadowTokenRemoteModel, properties: Array<ElementProperty>, values: Array<ElementPropertyValue>): ShadowToken;
    constructShadowTokenValue(rawData: ShadowTokenRemoteValue): ShadowTokenValue;
    constructBorderToken(rawData: BorderTokenRemoteModel, properties: Array<ElementProperty>, values: Array<ElementPropertyValue>): BorderToken;
    constructBorderTokenValue(rawData: BorderTokenRemoteValue): BorderTokenValue;
    constructTypographyToken(rawData: TypographyTokenRemoteModel, properties: Array<ElementProperty>, values: Array<ElementPropertyValue>): TypographyToken;
    constructTypographyTokenValue(rawData: TypographyTokenRemoteValue): TypographyTokenValue;
    constructBlurToken(rawData: BlurTokenRemoteModel, properties: Array<ElementProperty>, values: Array<ElementPropertyValue>): BlurToken;
    constructBlurTokenValue(rawData: BlurTokenRemoteValue): BlurTokenValue;
    /** Resolve token color value - meaning we are not creating new tokens, and require raw tokens to be already present */
    resolveReferencedColorTokenValue(token: ColorTokenRemoteData): ColorTokenValue;
    /** Resolve token measure value - meaning we are not creating new tokens, and require raw tokens to be already present */
    resolveReferencedMeasureTokenValue(token: MeasureTokenRemoteData): MeasureTokenValue;
    /** Resolve token font value - meaning we are not creating new tokens, and require raw tokens to be already present */
    resolveReferencedFontTokenValue(token: FontTokenRemoteData): FontTokenValue;
}
