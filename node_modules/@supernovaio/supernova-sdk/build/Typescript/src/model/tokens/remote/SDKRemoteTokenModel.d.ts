import { TokenType } from '../../enums/SDKTokenType';
import { BlurTokenRemoteData, BorderTokenRemoteData, ColorTokenRemoteData, FontTokenRemoteData, GenericTokenRemoteData, GradientTokenRemoteData, MeasureTokenRemoteData, RadiusTokenRemoteData, ShadowTokenRemoteData, TextTokenRemoteData, TypographyTokenRemoteData } from './SDKRemoteTokenData';
export interface TokenRemoteModel {
    id: string;
    brandId: string;
    designSystemVersionId: string;
    persistentId: string;
    type: TokenType;
    meta: {
        name: string;
        description: string;
    };
    originStyle?: {
        id?: string;
        name?: string;
        sourceId?: string;
    };
    data: {
        aliasTo?: string;
    };
    customPropertyOverrides: Array<{
        propertyId: string;
        value: any;
    }>;
    createdAt?: string;
    updatedAt?: string;
}
export declare type ColorTokenRemoteModel = TokenRemoteModel & {
    data: ColorTokenRemoteData;
};
export declare type TextTokenRemoteModel = TokenRemoteModel & {
    data: TextTokenRemoteData;
};
export declare type GenericTokenRemoteModel = TokenRemoteModel & {
    data: GenericTokenRemoteData;
};
export declare type TypographyTokenRemoteModel = TokenRemoteModel & {
    data: TypographyTokenRemoteData;
};
export declare type RadiusTokenRemoteModel = TokenRemoteModel & {
    data: RadiusTokenRemoteData;
};
export declare type ShadowTokenRemoteModel = TokenRemoteModel & {
    data: ShadowTokenRemoteData;
};
export declare type MeasureTokenRemoteModel = TokenRemoteModel & {
    data: MeasureTokenRemoteData;
};
export declare type FontTokenRemoteModel = TokenRemoteModel & {
    data: FontTokenRemoteData;
};
export declare type BorderTokenRemoteModel = TokenRemoteModel & {
    data: BorderTokenRemoteData;
};
export declare type GradientTokenRemoteModel = TokenRemoteModel & {
    data: GradientTokenRemoteData;
};
export declare type BlurTokenRemoteModel = TokenRemoteModel & {
    data: BlurTokenRemoteData;
};
