import { Brand, ElementProperty } from '../..';
import { DesignSystemVersion } from '../../core/SDKDesignSystemVersion';
import { ElementPropertyValue } from '../elements/values/SDKElementPropertyValue';
import { GenericTokenRemoteModel, TokenRemoteModel } from './remote/SDKRemoteTokenModel';
import { TextTokenRemoteValue } from './remote/SDKRemoteTokenValue';
import { Token } from './SDKToken';
import { GenericTokenValue } from './SDKTokenValue';
export declare class GenericToken extends Token {
    value: GenericTokenValue;
    constructor(version: DesignSystemVersion, baseToken: TokenRemoteModel, value: GenericTokenValue, alias: GenericToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>);
    static create(version: DesignSystemVersion, brand: Brand, name: string, description: string, value: string, alias: GenericToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>): GenericToken;
    static measureValueFromDefinition(definition: string): GenericTokenValue;
    toWriteObject(): GenericTokenRemoteModel;
    static valueToWriteObject(value: GenericTokenValue): {
        aliasTo: string | undefined;
        value: TextTokenRemoteValue;
    };
}
