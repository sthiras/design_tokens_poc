import { Brand, ElementProperty } from '../..';
import { DesignSystemVersion } from '../../core/SDKDesignSystemVersion';
import { DTTokenReferenceResolver } from '../../tools/design-tokens/utilities/SDKDTTokenReferenceResolver';
import { ElementPropertyValue } from '../elements/values/SDKElementPropertyValue';
import { TokenRemoteModel, TypographyTokenRemoteModel } from './remote/SDKRemoteTokenModel';
import { TypographyTokenRemoteValue } from './remote/SDKRemoteTokenValue';
import { Token } from './SDKToken';
import { TypographyTokenValue } from './SDKTokenValue';
export declare class TypographyToken extends Token {
    value: TypographyTokenValue;
    constructor(version: DesignSystemVersion, baseToken: TokenRemoteModel, value: TypographyTokenValue, alias: TypographyToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>);
    static create(version: DesignSystemVersion, brand: Brand, name: string, description: string, value: object, alias: TypographyToken | null, referenceResolver: DTTokenReferenceResolver, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>): TypographyToken;
    static typographyValueFromDefinition(definition: object, referenceResolver: DTTokenReferenceResolver): TypographyTokenValue;
    toWriteObject(): TypographyTokenRemoteModel;
    static valueToWriteObject(value: TypographyTokenValue): {
        aliasTo: string | undefined;
        value: TypographyTokenRemoteValue;
    };
}
