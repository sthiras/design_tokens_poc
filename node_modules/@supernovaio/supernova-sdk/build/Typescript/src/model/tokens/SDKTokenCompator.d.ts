import { Token } from '../..';
import { AnyTokenValue, BlurTokenValue, BorderTokenValue, ColorTokenValue, FontTokenValue, GenericTokenValue, GradientTokenValue, MeasureTokenValue, RadiusTokenValue, ShadowTokenValue, TextTokenValue, TypographyTokenValue, GradientStopValue } from './SDKTokenValue';
export declare class TokenComparator {
    static isEqualTokenValue(a: Token, b: Token): boolean;
    static referencesSameToken(a: AnyTokenValue, b: AnyTokenValue): boolean;
    static anyIsReference(a: AnyTokenValue, b: AnyTokenValue): boolean;
    static isUndefinedValue(a: AnyTokenValue, b: AnyTokenValue): boolean;
    static isEqualBlurTokenValue(a: BlurTokenValue, b: BlurTokenValue): boolean;
    static isEqualBorderTokenValue(a: BorderTokenValue, b: BorderTokenValue): boolean;
    static isEqualColorTokenValue(a: ColorTokenValue, b: ColorTokenValue): boolean;
    static isEqualFontTokenValue(a: FontTokenValue, b: FontTokenValue): boolean;
    static isEqualGenericTokenValue(a: GenericTokenValue, b: GenericTokenValue): boolean;
    static isEqualGradientTokenValue(a: GradientTokenValue, b: GradientTokenValue): boolean;
    static isEqualGradientStops(a: Array<GradientStopValue>, b: Array<GradientStopValue>): boolean;
    static isEqualMeasureTokenValue(a: MeasureTokenValue, b: MeasureTokenValue): boolean;
    static isEqualRadiusTokenValue(a: RadiusTokenValue, b: RadiusTokenValue): boolean;
    static isEqualShadowTokenValue(a: ShadowTokenValue, b: ShadowTokenValue): boolean;
    static isEqualTextTokenValue(a: TextTokenValue, b: TextTokenValue): boolean;
    static isEqualTypographyTokenValue(a: TypographyTokenValue, b: TypographyTokenValue): boolean;
}
