import { Brand, ElementProperty } from '../..';
import { DesignSystemVersion } from '../../core/SDKDesignSystemVersion';
import { DTTokenReferenceResolver } from '../../tools/design-tokens/utilities/SDKDTTokenReferenceResolver';
import { ElementPropertyValue } from '../elements/values/SDKElementPropertyValue';
import { Unit } from '../enums/SDKUnit';
import { MeasureTokenRemoteModel, TokenRemoteModel } from './remote/SDKRemoteTokenModel';
import { MeasureTokenRemoteValue } from './remote/SDKRemoteTokenValue';
import { Token } from './SDKToken';
import { MeasureTokenValue } from './SDKTokenValue';
export declare class MeasureToken extends Token {
    value: MeasureTokenValue;
    constructor(version: DesignSystemVersion, baseToken: TokenRemoteModel, value: MeasureTokenValue, alias: MeasureToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>);
    static create(version: DesignSystemVersion, brand: Brand, name: string, description: string, value: string | number, alias: MeasureToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>): MeasureToken;
    static measureValueFromDefinition(definition: string | number): MeasureTokenValue;
    static parseMeasure(definition: string): {
        measure: number;
        unit: Unit;
    };
    static measureValueFromDefinitionOrReference(definition: any, referenceResolver: DTTokenReferenceResolver): MeasureTokenValue;
    toWriteObject(): MeasureTokenRemoteModel;
    static valueToWriteObject(value: MeasureTokenValue): {
        aliasTo: string | undefined;
        value: MeasureTokenRemoteValue;
    };
    static valueToInternalWriteObject(value: MeasureTokenValue | null): MeasureTokenValue | null;
}
