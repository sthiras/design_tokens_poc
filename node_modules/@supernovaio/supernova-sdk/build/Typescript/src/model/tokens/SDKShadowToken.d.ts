import { Brand, ElementProperty } from '../..';
import { DesignSystemVersion } from '../../core/SDKDesignSystemVersion';
import { DTTokenReferenceResolver } from '../../tools/design-tokens/utilities/SDKDTTokenReferenceResolver';
import { ElementPropertyValue } from '../elements/values/SDKElementPropertyValue';
import { ShadowTokenRemoteModel, TokenRemoteModel } from './remote/SDKRemoteTokenModel';
import { ShadowTokenRemoteValue } from './remote/SDKRemoteTokenValue';
import { Token } from './SDKToken';
import { ShadowTokenValue } from './SDKTokenValue';
export declare class ShadowToken extends Token {
    value: ShadowTokenValue;
    shadowLayers: Array<ShadowToken>;
    isVirtual: boolean;
    constructor(version: DesignSystemVersion, baseToken: TokenRemoteModel, value: ShadowTokenValue, alias: ShadowToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>);
    static create(version: DesignSystemVersion, brand: Brand, name: string, description: string, value: object, alias: ShadowToken | null, referenceResolver: DTTokenReferenceResolver, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>): ShadowToken;
    static shadowValueFromDefinition(definition: object, referenceResolver: DTTokenReferenceResolver): ShadowTokenValue;
    toWriteObject(): ShadowTokenRemoteModel;
    static valueToWriteObject(value: ShadowTokenValue): {
        aliasTo: string | undefined;
        value: ShadowTokenRemoteValue;
    };
}
