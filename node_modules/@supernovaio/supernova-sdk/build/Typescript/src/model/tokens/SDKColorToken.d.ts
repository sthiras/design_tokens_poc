import { Brand, ElementProperty } from '../..';
import { DesignSystemVersion } from '../../core/SDKDesignSystemVersion';
import { ColorTokenRemoteModel, TokenRemoteModel } from './remote/SDKRemoteTokenModel';
import { ColorTokenRemoteValue } from './remote/SDKRemoteTokenValue';
import { Token } from './SDKToken';
import { ColorTokenValue } from './SDKTokenValue';
import { DTTokenReferenceResolver } from '../../tools/design-tokens/utilities/SDKDTTokenReferenceResolver';
import { ElementPropertyValue } from '../elements/values/SDKElementPropertyValue';
export declare class ColorToken extends Token {
    value: ColorTokenValue;
    constructor(version: DesignSystemVersion, baseToken: TokenRemoteModel, value: ColorTokenValue, alias: ColorToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>);
    static create(version: DesignSystemVersion, brand: Brand, name: string, description: string, value: string, alias: ColorToken | null, properties: Array<ElementProperty>, propertyValues: Array<ElementPropertyValue>): ColorToken;
    static colorValueFromDefinition(definition: string): ColorTokenValue;
    static normalizeColor(color: string): string | null;
    static normalizeOpacity(value: string): number;
    static colorValueFromDefinitionOrReference(definition: any, referenceResolver: DTTokenReferenceResolver): ColorTokenValue | undefined;
    toWriteObject(): ColorTokenRemoteModel;
    static valueToWriteObject(value: ColorTokenValue): {
        aliasTo: string | undefined;
        value: ColorTokenRemoteValue;
    };
}
