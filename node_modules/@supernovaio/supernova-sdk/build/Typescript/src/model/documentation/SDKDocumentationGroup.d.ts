import { DocumentationGroupBehavior } from "../enums/SDKDocumentationGroupBehavior";
import { DocumentationItem, DocumentationItemModel } from "./SDKDocumentationItem";
import { DocumentationPage } from "./SDKDocumentationPage";
export interface DocumentationGroupModel extends DocumentationItemModel {
    isRoot: boolean;
    childrenIds: Array<string>;
    groupBehavior: DocumentationGroupBehavior;
}
export declare class DocumentationGroup extends DocumentationItem {
    /** If true, this is unique within documentation (just one) that contains all top-level objects and is root of the docs tree (root > groups > items > blocks ...) */
    isRoot: boolean;
    /** IDs of items belonging to the documentation group. Can be page or group */
    childrenIds: Array<string>;
    /** Items belonging to the documentation group. Can be page or group */
    children: Array<DocumentationItem>;
    /** Parent group reference */
    parent: DocumentationGroup | null;
    /** Signifies how the group should behave. If set to "tabs", group behaves as "page", but contains multiple tabbed pages inside it. "Group" signifies virtual group used for content structuring */
    groupBehavior: DocumentationGroupBehavior;
    /** Children filtered to be only groups */
    get subgroups(): Array<DocumentationGroup>;
    /** Children filtered to be only pages */
    get pages(): Array<DocumentationPage>;
    /** Internal */
    relativeFirstPageUrl: string | null;
    /** Internal */
    deployedFirstPageUrl: string | null;
    constructor(model: DocumentationGroupModel);
    addChild(item: DocumentationItem): void;
    addChildren(groups: Array<DocumentationItem>): void;
    setParent(parent: DocumentationGroup | null): void;
    /** Internal: Modifies object with new paths. Don't use outside SDK environment as it doesn't propagate the data back to source */
    internalOverridePaths(relative: string | null, deployed: string | null): void;
    /** Retrieve relative page path without the associated domain for the first page in the group. Will work even when documentation was not yet deployed */
    relativeDocsPageUrl(): string | null;
    /** Retrieve page url for the first page in the group, if the documentation was already deployed (either default or custom domain) */
    deployedDocsPageUrl(): string | null;
}
