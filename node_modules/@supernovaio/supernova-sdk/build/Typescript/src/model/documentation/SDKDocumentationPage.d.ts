import { ExporterCustomBlock } from "../exporters/custom_blocks/SDKExporterCustomBlock";
import { DocumentationConfiguration } from "./SDKDocumentationConfiguration";
import { DocumentationGroup } from "./SDKDocumentationGroup";
import { DocumentationItemModel, DocumentationItem } from "./SDKDocumentationItem";
import { DocumentationPageBlockModel, DocumentationPageBlock } from "./SDKDocumentationPageBlock";
export interface DocumentationPageModel extends DocumentationItemModel {
    blocks?: Array<DocumentationPageBlockModel>;
}
export declare class DocumentationPage extends DocumentationItem {
    /** All blocks that were defined on the top level of the page */
    blocks: Array<DocumentationPageBlock>;
    /** Containing group. Can either be true group (abstract), or tab group */
    parent: DocumentationGroup;
    /** Internal */
    deployedUrl: string | null;
    /** Internal */
    relativeUrl: string | null;
    /** Internal */
    editorUrl: string | null;
    constructor(model: DocumentationPageModel, customBlocks: Array<ExporterCustomBlock>, configuration: DocumentationConfiguration);
    /** Internal: Modifies object with new paths. Don't use outside SDK environment as it doesn't propagate the data back to source */
    internalOverridePaths(deployed: string | null, editor: string | null, relative: string | null): void;
    /** Internal: Sets new parent. Used when manipulating with object internally. Don't use outside SDK environment */
    setParent(parent: DocumentationGroup): void;
    /** Retrieve editor page URL that can be opened */
    editorPageUrl(): string | null;
    /** Retrieve documentation page URL, if the documentation was already deployed (either default or custom domain) */
    deployedPageUrl(): string | null;
    /** Retrieve relative page path without the associated domain. Will work even when documentation was not yet deployed */
    relativePageUrl(): string | null;
}
