import { DesignSystemVersion, Token, TokenType } from '../..';
import { AnyTokenValue } from '../tokens/SDKTokenValue';
import { TokenThemeOverrideRemoteModel } from './SDKTokenThemeOverride';
export interface TokenThemeRemoteModel {
    meta: {
        name: string;
        description: string;
    };
    id: string;
    persistentId: string;
    designSystemVersionId: string;
    brandId: string;
    codeName: string;
    createdAt?: string;
    updatedAt?: string;
    overrides: Array<TokenThemeOverrideRemoteModel>;
}
export declare class TokenTheme {
    id: string;
    versionedId: string;
    brandId: string;
    designSystemVersionId: string;
    name: string;
    description: string;
    codeName: string;
    createdAt: Date | null;
    updatedAt: Date | null;
    overriddenTokens: Array<Token>;
    constructor(model: TokenThemeRemoteModel, dsVersion: DesignSystemVersion);
    addOverride(override: Token): void;
    addOverrides(overrides: Array<Token>): void;
    toWriteObject(): TokenThemeRemoteModel;
    private tokensToOverrides;
    toWriteOverrideObject(token: Token): TokenThemeOverrideRemoteModel;
    valueToWriteObject(value: AnyTokenValue, type: TokenType): {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").BlurTokenRemoteValue;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").BorderTokenRemoteValue;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").FontTokenRemoteValue;
    } | {
        aliasTo: string;
        value: string;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").GradientTokenRemoteValue;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").MeasureTokenRemoteValue;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").RadiusTokenRemoteValue;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").ShadowTokenRemoteValue;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").TypographyTokenRemoteValue;
    };
}
