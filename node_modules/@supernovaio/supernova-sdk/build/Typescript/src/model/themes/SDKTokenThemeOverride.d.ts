import { TokenType, TokenOrigin } from '../..';
import { BlurTokenRemoteData, BorderTokenRemoteData, ColorTokenRemoteData, FontTokenRemoteData, GenericTokenRemoteData, GradientTokenRemoteData, MeasureTokenRemoteData, RadiusTokenRemoteData, ShadowTokenRemoteData, TextTokenRemoteData, TypographyTokenRemoteData } from '../tokens/remote/SDKRemoteTokenData';
import { AnyTokenValue } from '../tokens/SDKTokenValue';
export interface TokenThemeOverrideRemoteModel {
    data: ColorTokenRemoteData | TextTokenRemoteData | GenericTokenRemoteData | TypographyTokenRemoteData | RadiusTokenRemoteData | ShadowTokenRemoteData | MeasureTokenRemoteData | FontTokenRemoteData | BorderTokenRemoteData | GradientTokenRemoteData | BlurTokenRemoteData;
    tokenPersistentId: string;
    type: TokenType;
    origin: TokenOrigin | null;
    createdAt?: string;
    updatedAt?: string;
}
export declare class TokenThemeOverride {
    value: AnyTokenValue;
    tokenId: string;
    type: TokenType;
    origin: TokenOrigin | null;
    createdAt: Date | null;
    updatedAt: Date | null;
    constructor(model: TokenThemeOverrideRemoteModel, value: AnyTokenValue);
    toWriteObject(): TokenThemeOverrideRemoteModel;
    valueToWriteObject(value: AnyTokenValue, type: TokenType): {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").BlurTokenRemoteValue;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").BorderTokenRemoteValue;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").FontTokenRemoteValue;
    } | {
        aliasTo: string;
        value: string;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").GradientTokenRemoteValue;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").MeasureTokenRemoteValue;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").RadiusTokenRemoteValue;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").ShadowTokenRemoteValue;
    } | {
        aliasTo: string;
        value: import("../tokens/remote/SDKRemoteTokenValue").TypographyTokenRemoteValue;
    };
}
